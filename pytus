#!/usr/bin/env python3
"""
Update dwm status

Dependency:
- Colors depends on my status color patch
- Clickable status depends on my statuscmd patch

See https://github.com/OliverLew/dwm
"""

import dbus
import glob
import os
import signal
import threading
import time
from mpd import MPDClient, base
from pyalsa import alsamixer
from Xlib import display


class Notification:
    def __init__(self):
        bus_name = "org.freedesktop.Notifications"
        obj_path = "/org/freedesktop/Notifications"
        bus = dbus.SessionBus()
        obj = bus.get_object(bus_name, obj_path)

        interface = dbus.Interface(obj, bus_name)
        self.notify_func = interface.get_dbus_method("Notify")

        interface_properties = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
        self.property_get = interface_properties.get_dbus_method("Get")

    def notify(self, summary, body="", icon="", value=None, urgency=1, timeout=3000):
        hints = {"urgency": urgency, "category": "dwm-status"}
        if value:
            hints['value'] = value
        self.notify_func("dwm-status", 0, icon, summary, body, [], hints, timeout)

    def dunst_paused(self):
        # see dunstctl script from dunst project
        return self.property_get("org.dunstproject.cmd0", "paused").bit_count()


class Status:
    def __init__(self, segments):
        self.dpy = display.Display()
        self.root = self.dpy.screen().root

        self.stopped = threading.Event()
        self.status = []
        self.threads = []
        self.segments = segments
        for segment in segments:
            index = len(self.status)
            if index >= 14:
                print("At most 14 segments are allowed")
                exit(1)

            self.status.append("")
            t = threading.Thread(target=self.loop(index, segment))
            self.threads.append(t)
            t.start()
        signal.signal(signal.SIGINT, self.stop)
        signal.signal(signal.SIGTERM, self.stop)
        for sig in range(signal.SIGRTMIN, signal.SIGRTMAX + 1):
            signal.signal(sig, self.sighandler)

    def sighandler(self, number, frame):
        index = number - signal.SIGRTMIN - 1
        if index < len(self.segments):
            self.update(index, self.segments[index])
            self.show()

    def update(self, i, segment):
        fmts = segment.run()
        segstr = segment.fmtstr.format_map(fmts)
        segstr = chr(i + 1) + f"{segstr}" + chr(15)
        self.status[i] = segstr

    def loop(self, i, segment):
        def func():
            while not self.stopped.is_set():
                self.update(i, segment)
                time.sleep(segment.interval)
        return func

    def show(self):
        status_text = ' ' + ' '.join(self.status) + ' '
        self.root.set_wm_name(status_text.encode())
        self.dpy.sync()

    def run(self):
        while not self.stopped.is_set():
            curtime = time.time()
            nextsec = int(curtime + 0.5) + 1
            time.sleep(nextsec - curtime)
            self.show()

    def stop(self, number, frame):
        self.stopped.set()
        for t in self.threads:
            t.join()


class Segment:
    def __init__(self, fmtstr, interval=1, icons=[], color=0, keys={}):
        self.interval = interval
        self.fmtstr = fmtstr
        self.icons = icons
        self.color = color

    def run(self):
        return {}


class ALSA(Segment):
    """
    Besides arguments for Segments class:
    `icons` could be a list of:
        one glyph, or
        two glyphs, for unmuted and muted state
    """
    def __init__(self, *args, **kargs):
        super().__init__(*args, **kargs)
        self.mixer = alsamixer.Mixer()
        self.mixer.attach()
        self.mixer.load()
        self.alsa = alsamixer.Element(self.mixer, 'Master')
        self.alsa_range = self.alsa.get_volume_range()

    def run(self):
        self.mixer.handle_events()
        volume = self.alsa.get_volume()
        active = self.alsa.get_switch()
        if self.icons == []:
            icon = ""
        elif len(self.icons) == 1:
            icon = self.icons[0]
        elif len(self.icons) > 1:
            icon = self.icons[0] if active else self.icons[1]
        return {
            'vol': 100.0 * volume / self.alsa_range[1],
            'active': active,
            'icon': icon
        }


class Backlight(Segment):
    def run(self):
        for light in glob.glob("/sys/class/backlight/*"):
            try:
                current = open(light + "/brightness").read().strip()
                maximum = open(light + "/max_brightness").read().strip()
                return {
                    "backlight": 100.0 * float(current) / float(maximum)
                }
            except (FileNotFoundError, ZeroDivisionError):
                continue


class Battery(Segment):
    def power(self):
        for status in glob.glob("/sys/class/power_supply/A*/online"):
            return open(status).readline().startswith('1')

    def run(self):
        # not done
        for battery in glob.glob("/sys/class/power_supply/BAT*/uevent"):
            uevent = {k: v.strip() for k, v in [line.split('=') for line in open(battery)]}

            status = uevent.get('POWER_SUPPLY_STATUS').lower()
            charge_full = uevent.get('POWER_SUPPLY_CHARGE_FULL')
            charge_now = uevent.get('POWER_SUPPLY_CHARGE_NOW')
            energy_full = uevent.get('POWER_SUPPLY_ENERGY_FULL')
            energy_now = uevent.get('POWER_SUPPLY_ENERGY_NOW')
            capacity = uevent.get('POWER_SUPPLY_CAPACITY')
            voltage_now = uevent.get('POWER_SUPPLY_VOLTAGE_NOW')
            current_now = uevent.get('POWER_SUPPLY_CURRENT_NOW')
            power_now = uevent.get('POWER_SUPPLY_POWER_NOW')
            time_to_empty_now = uevent.get('POWER_SUPPLY_TIME_TO_EMPTY_NOW')
            time_to_full_now = uevent.get('POWER_SUPPLY_TIME_TO_FULL_NOW')

            if capacity:
                perc = float(capacity)
            elif charge_now and charge_full and current_now:
                perc = float(charge_now) / float(charge_full)
            elif energy_now and energy_full and \
                    (power_now or current_now and voltage_now):
                perc = float(energy_now) / float(energy_full)
            else:
                perc = 0

            if power_now:
                power = float(power_now) / 10**6
            elif voltage_now and current_now:
                power = float(current_now) * float(voltage_now) / 10**12
            elif current_now:
                current = float(current_now) / 10**6
            if status == 'charging':
                if time_to_full_now:
                    time = time_to_full_now
                else:
                    time = 0
            elif status == 'discharging' and time_to_empty_now:
                time = time_to_empty_now

        ac = self.power()
        return {
            'perc': perc,
            'power': "on" if ac else "off",
            'icon': self.icons[1 if ac else 0][int((perc + 5) / 10)]
        }


class CPU(Segment):
    def run(self):
        line = open("/proc/stat").readline()
        cols = [float(c) for c in line.split()[1:]]
        idle = cols[3] + cols[4]
        total = sum(cols)

        try:
            diff_idle = idle - self.idle_old
            diff_total = total - self.total_old
            perc = (1 - diff_idle / diff_total) * 100
        except (ZeroDivisionError, AttributeError):
            perc = 0

        self.idle_old = idle
        self.total_old = total
        return {
            'cpu_idle': idle,
            'cpu_total': total,
            'perc': perc
        }


class Date(Segment):
    def run(self):
        return {'date': time.strftime("%a %b %d %H:%M:%S")}


class Memory(Segment):
    def run(self):
        meminfo = [line.split(':') for line in open('/proc/meminfo')]
        mem = {k: int(v.strip().split()[0]) for k, v in meminfo}
        return {
            'used': mem['MemTotal'] - mem['MemAvailable'],
            'total': mem['MemTotal'],
            'perc': 100 * (mem['MemTotal'] - mem['MemAvailable']) / mem['MemTotal'],
            'swap_used': mem['SwapTotal'] - mem['SwapFree'],
            'swap_total': mem['SwapTotal'],
            'swap_perc': 100 * (mem['SwapTotal'] - mem['SwapFree']) / mem['SwapTotal']
        }


class Mpd(Segment):
    def __init__(self, *args, **kargs):
        super().__init__(*args, **kargs)
        self.mpdclient = MPDClient()
        self.connect()

    def connect(self):
        try:
            self.mpdclient.connect("localhost", 6600)
        except ConnectionRefusedError:
            time.sleep(1)

    def run(self):
        try:
            currentsong = self.mpdclient.currentsong()
            status = self.mpdclient.status()
            return {
                'song': currentsong.get('file', ''),
                'time': float(currentsong.get('time', 0)),
                'elapsed': float(status.get('elapsed', 0)),
                'status': status.get('state', ''),
                'icon': self.icons[0 if status.get('state', '') == "play" else 1]
            }
        except (base.ConnectionError, ConnectionResetError):
            self.connect()
            return {'song': "", 'time': 0, 'elapsed': 0, 'status': "n/a", 'icon': self.icons[2]}


class Network(Segment):
    def run(self):
        fmts = {'ethernet': 0, 'wlan': 0, 'level': 0, 'icon': self.icons[0][0]}
        netdir = "/sys/class/net"
        for iface in os.listdir(netdir):
            ipath = os.path.join(netdir, iface, "operstate")
            state = open(ipath).readline().strip()
            if iface.startswith('e') and state == "up":
                fmts['ethernet'] = 1
                fmts['icon'] = self.icons[1][0]
            if iface.startswith('w') and state == "up":
                fmts['wlan'] = 1
                fmts['icon'] = self.icons[0][0]
        wireless = "/proc/net/wireless"
        for line in open(wireless).readlines():
            line = line.strip()
            if line.startswith("wl"):
                level = float(line.split()[3])
                fmts['level'] = level
                if level >= -60:
                    fmts['icon'] = self.icons[0][-1]
                elif level >= -67:
                    fmts['icon'] = self.icons[0][-2]
                elif level >= -75:
                    fmts['icon'] = self.icons[0][-3]
                else:
                    fmts['icon'] = self.icons[0][-4]
        return fmts


class Dunst(Segment):
    def run(self):
        active = notification.dunst_paused() == 1
        return {"icon": self.icons[active]}


if __name__ == "__main__":
    notification = Notification()

    Status([
        Memory("󰍛{perc:2.0f}", interval=5),
        CPU("󰓅{perc:2.0f}"),
        ALSA("{icon}{vol:2.0f}", icons=['󰕾', '󰖁'], interval=5),
        Backlight("󰃟{backlight:2.0f}", interval=5),
        Mpd("󰝚{icon}", icons=["󰏤", "󰐊", "󰓛"], interval=5),
        Battery(
            "{icon}{perc:2.0f}",
            icons=[
                ['󰂎', '󰁺', '󰁻', '󰁼', '󰁽', '󰁾', '󰁿', '󰂀', '󰂁', '󰂂', '󰁹'],
                ['󰢟', '󰢜', '󰂆', '󰂇', '󰂈', '󰢝', '󰂉', '󰢞', '󰂊', '󰂋', '󰂅'],
                ["󱉞"]
            ],
            interval=60
        ),
        Network("{icon}", icons=[["󰤯", "󰤟", "󰤢", "󰤥", "󰤨"], ["󰈀"]]),
        Date("󰃰{date}"),
        Dunst(" {icon}", icons=["󰂞", "󰂛"], interval=5),
        Segment(" 󰣖"),
        Segment(" 󰍉"),
    ]).run()
