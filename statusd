#!/usr/bin/env python3
"""
Update dwm status

Dependency:
- Colors depends on my status color patch
- Clickable status depends on my statuscmd patch

See https://github.com/OliverLew/dwm
"""

import dbus
import glob
import imaplib
import os
import signal
import threading
import time
from subprocess import run, DEVNULL, PIPE

from mpd import MPDClient, base
from pyalsa import alsamixer
from Xlib import display


class Notification:
    def __init__(self):
        bus_name = "org.freedesktop.Notifications"
        obj_path = "/org/freedesktop/Notifications"
        bus = dbus.SessionBus()
        obj = bus.get_object(bus_name, obj_path)

        interface = dbus.Interface(obj, bus_name)
        self.notify_func = interface.get_dbus_method("Notify")

        interface_properties = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
        self.property_get = interface_properties.get_dbus_method("Get")

    def notify(self, summary, body="", icon="", value=None, urgency=1, timeout=3000):
        hints = {"urgency": urgency, "x-canonical-private-synchronous": "statusd"}
        if value:
            body += "[" + "=" * (value // 4) + ">" + " " * (25 - value // 4) + "]"
        self.notify_func("statusd", 0, icon, summary, body, [], hints, timeout)

    def dunst_paused(self):
        # see dunstctl script from dunst project
        return self.property_get("org.dunstproject.cmd0", "paused").bit_count()


class Status:
    def __init__(self, segments, dwm=True, tmux=None):
        self.dwm = dwm
        self.tmux = tmux
        self.segments = segments
        self.event = threading.Event()
        self.status = []
        self.threads = []
        for segment in segments:
            index = len(self.status)
            if index >= 14:
                notification.notify("At most 14 segments are allowed")
                exit(1)

            self.status.append("")
            t = threading.Thread(target=self.loop(index))
            self.threads.append(t)
            t.start()

        if dwm:
            self.dpy = display.Display()
            self.root = self.dpy.screen().root

        signal.signal(signal.SIGINT, self.stop)
        signal.signal(signal.SIGTERM, self.stop)
        for sig in range(signal.SIGRTMIN, signal.SIGRTMAX + 1):
            signal.signal(sig, self.sighandler)

    def update(self, i, notify=False):
        segment = self.segments[i]
        fmts = segment.run(notify=notify)
        segstr = segment.fmtstr.format_map(fmts)
        # Special character for statuscmd patch
        segstr = chr(i + 1) + f"{segstr}" + chr(15)
        # Special character for status colors patch
        if segment.fgcolor != -1:
            segstr = chr(segment.fgcolor + 16) + segstr
        if segment.bgcolor != -1:
            segstr = chr(segment.bgcolor + 24) + segstr
        self.status[i] = segstr

    def sighandler(self, number, frame):
        index = number - signal.SIGRTMIN - 1
        if index < len(self.segments):
            self.update(index, notify=True)
            self.show()

    def loop(self, i):
        def loopfunc():
            while not self.event.is_set():
                self.update(i)
                self.event.wait(self.segments[i].interval)
        return loopfunc

    def show(self):
        status_text = ''.join(self.status)
        if self.dwm:
            self.root.set_wm_name(status_text.encode())
            self.dpy.sync()

        if self.tmux:
            tmux_socket = os.path.join("/tmp/tmux-{}".format(os.getuid()), self.tmux)
            sessions = run(['tmux', '-S', tmux_socket, 'ls'], stderr=DEVNULL, stdout=DEVNULL)
            if sessions.returncode == 0:
                run(['tmux', '-S', tmux_socket, 'set', 'status-right', status_text])

    def start(self):
        while not self.event.is_set():
            curtime = time.time()
            nextsec = int(curtime + 0.5) + 1
            self.event.wait(nextsec - curtime)
            self.show()

    def stop(self, number, frame):
        self.event.set()
        for t in self.threads:
            t.join()


class Segment:
    def __init__(self, fmtstr, interval=1, icons=[], fg=-1, bg=-1, keys={}):
        self.interval = interval
        self.fmtstr = fmtstr
        self.icons = icons
        self.fgcolor = fg
        self.bgcolor = bg

    def run(self, notify=False):
        return {}


class ALSA(Segment):
    """
    Besides arguments for Segments class:
    `icons` could be a list of:
        one glyph, or
        two glyphs, for unmuted and muted state
    """
    def __init__(self, fmtstr, **kargs):
        super().__init__(fmtstr, **kargs)
        self.mixer = alsamixer.Mixer()
        self.mixer.attach()
        self.mixer.load()
        self.alsa = alsamixer.Element(self.mixer, 'Master')
        self.alsa_range = self.alsa.get_volume_range()

    def run(self, notify=False):
        self.mixer.handle_events()
        volume = self.alsa.get_volume()
        active = self.alsa.get_switch()
        vol = 100.0 * volume / self.alsa_range[1]
        if self.icons == []:
            icon = ""
        elif len(self.icons) == 1:
            icon = self.icons[0]
        elif len(self.icons) > 1:
            icon = self.icons[0] if active else self.icons[1]

        if notify:
            notification.notify(
                f"Volume: {vol:02.0f}",
                icon="audio-volume-high-symbolic",
                value=int(vol)
            )

        return {
            'vol': vol,
            'active': active,
            'icon': icon
        }


class Backlight(Segment):
    def run(self, notify=False):
        for light in glob.glob("/sys/class/backlight/*"):
            try:
                current = open(light + "/brightness").read().strip()
                maximum = open(light + "/max_brightness").read().strip()
                backlight = 100.0 * float(current) / float(maximum)
            except (FileNotFoundError, ZeroDivisionError):
                continue

        if notify:
            notification.notify(
                f"Brightness: {backlight:02.0f}",
                icon="display-brightness-symbolic",
                value=int(backlight)
            )

        return {"backlight": backlight}


class Battery(Segment):
    def run(self, notify=False):
        fmts = {}
        for battery in glob.glob("/sys/class/power_supply/*/uevent"):
            uevent_list = [line.split('=') for line in open(battery)]
            uevent = {pair[0][13:]: pair[1].strip() for pair in uevent_list}
            for k in uevent:
                if uevent[k].isdigit():
                    uevent[k] = int(uevent[k])

            if uevent['TYPE'] == 'Mains':
                fmts['ac'] = uevent.get('ONLINE')
            elif uevent['TYPE'] == 'Battery':
                if uevent.get('CAPACITY'):
                    fmts['perc'] = uevent['CAPACITY']
                elif uevent.get('CHARGE_FULL') and uevent.get('CHARGE_FULL'):
                    fmts['perc'] = uevent['CHARGE_FULL'] / uevent['CHARGE_FULL']
                elif uevent.get('ENERGY_NOW') and uevent.get('ENERGY_FULL'):
                    fmts['perc'] = uevent['ENERGY_NOW'] / uevent['ENERGY_FULL']
                else:
                    fmts['perc'] = -1

                if uevent.get('ENERGY_NOW') and uevent.get('POWER_NOW'):
                    fmts['time'] = uevent['ENERGY_NOW'] / uevent['POWER_NOW']
                elif uevent.get('CURRENT_NOW') and uevent.get('CHARGE_NOW'):
                    fmts['time'] = uevent['CHARGE_NOW'] / uevent['CURRENT_NOW']
                else:
                    fmts['time'] = -1

        if notify:
            notification.notify(f"Battery: {fmts['perc']:02.0f}%\nTime: {fmts['time']:.1f}h")

        fmts['icon'] = self.icons[fmts.get('ac')][int((fmts['perc'] + 5) / 10)]
        return fmts


class CPU(Segment):
    def get_perc(self):
        line = open("/proc/stat").readline()
        cols = [float(c) for c in line.split()[1:]]
        idle = cols[3] + cols[4]
        total = sum(cols)

        try:
            diff_idle = idle - self.idle_old
            diff_total = total - self.total_old
            perc = (1 - diff_idle / diff_total) * 100
        except (ZeroDivisionError, AttributeError):
            perc = 0

        self.idle_old = idle
        self.total_old = total

        return idle, total, perc

    def get_freq(self):
        freq = []
        for line in open("/proc/cpuinfo"):
            if line[:7] == "cpu MHz":
                freq.append(float(line.split()[-1]))
        return sum(freq) / len(freq) / 1000

    def run(self, notify=False):
        idle, total, perc = self.get_perc()
        freq = self.get_freq()
        return {
            'freq': freq,
            'cpu_idle': idle,
            'cpu_total': total,
            'perc': perc
        }


class Date(Segment):
    def run(self, notify=False):
        return {'date': time.strftime("%a %b %d %H:%M:%S")}


class Dunst(Segment):
    def run(self, notify=False):
        return {"icon": self.icons[notification.dunst_paused()]}


class IMAP(Segment):
    def __init__(self, fmtstr, email, **kargs):
        super().__init__(fmtstr, **kargs)
        self.email = email

        default_server = "imap." + email.split("@")[1]
        self.server = kargs.get("server", default_server)

        default_port = imaplib.IMAP4_SSL_PORT
        self.port = kargs.get("port", default_port)

        self.password = kargs.get("password")
        if self.password is None:
            pass_cmd = ['pass', 'show', f'mail/{email}']
            res = run(pass_cmd, stdout=PIPE, stderr=PIPE)
            if res.returncode != 0:
                print(res.stderr.decode().strip())
                exit(1)
            self.password = res.stdout.decode().strip()

    def run(self, notify=False):
        with imaplib.IMAP4_SSL(self.server, self.port) as m:
            m.login(self.email, self.password)
            m.select()
            uids = m.search(None, 'UNSEEN')[1][0].decode().split()
            m.close()
            return {"unread": len(uids), "icon": self.icons[len(uids) == 0]}


class Memory(Segment):
    def human_readable(self, n):
        units = ['KB', "MB", "GB"]
        for unit in units:
            if n < 1024:
                return f"{n:6.1f}{unit}"
            else:
                n /= 1024
        return "Too big"

    def run(self, notify=False):
        meminfo = [line.split()[:2] for line in open('/proc/meminfo')]
        mem = {k[:-1]: int(v) for k, v in meminfo}

        used = mem['MemTotal'] - mem['MemAvailable']
        total = mem['MemTotal']
        perc = 100 * (used / total)
        swap_used = mem['SwapTotal'] - mem['SwapFree']
        swap_total = mem['SwapTotal']
        swap_perc = 100 * (swap_used / swap_total)

        if notify:
            notification.notify("Memory: {}/{} ({:.1f}%)\nSwap:   {}/{} ({:.1f}%)".format(
                self.human_readable(used), self.human_readable(total), perc,
                self.human_readable(swap_used), self.human_readable(swap_total), swap_perc
            ))

        return {
            'used': used, 'total': total, 'perc': perc,
            'swap_used': swap_used, 'swap_total': swap_total, 'swap_perc': swap_perc
        }


class Mpd(Segment):
    def __init__(self, fmtstr, **kargs):
        super().__init__(fmtstr, **kargs)
        self.mpdclient = MPDClient()
        self.connect()

    def connect(self):
        try:
            self.mpdclient.connect("localhost", 6600)
        except ConnectionRefusedError:
            pass

    def run(self, notify=False):
        try:
            currentsong = self.mpdclient.currentsong()
            status = self.mpdclient.status()
            return {
                'song': currentsong.get('file', ''),
                'time': float(currentsong.get('time', 0)),
                'elapsed': float(status.get('elapsed', 0)),
                'status': status.get('state', ''),
                'icon': self.icons[0 if status.get('state', '') == "play" else 1]
            }
        except (base.ConnectionError, ConnectionResetError):
            self.connect()
            return {'song': "", 'time': 0, 'elapsed': 0, 'status': "n/a", 'icon': self.icons[2]}


class Network(Segment):
    # TODO: speed from /sys/class/net/<if>/statictics/{rx,tx}_bytes
    def run(self, notify=False):
        fmts = {'ethernet': 0, 'wlan': 0, 'level': 0, 'icon': self.icons[0][0]}
        netdir = "/sys/class/net"
        for iface in os.listdir(netdir):
            ipath = os.path.join(netdir, iface, "operstate")
            state = open(ipath).readline().strip()
            if iface.startswith('e') and state == "up":
                fmts['ethernet'] = 1
                fmts['icon'] = self.icons[1][0]
            if iface.startswith('w') and state == "up":
                fmts['wlan'] = 1
                fmts['icon'] = self.icons[0][0]
        wireless = "/proc/net/wireless"
        for line in open(wireless).readlines():
            line = line.strip()
            if line.startswith("wl"):
                level = float(line.split()[3])
                fmts['level'] = level
                # level-4 >= -60 > level-3 >= -67.5 > level-2 >= -75 > level-1
                ilevel = int((level + 80) / 7.5)
                fmts['icon'] = self.icons[0][min(max(ilevel, 0), 4)]

        if notify and fmts['wlan']:
            notification.notify("Wifi level: {}".format(fmts['level']))
        return fmts


if __name__ == "__main__":
    notification = Notification()

    Status([
        Memory(" 󰍛 {perc:02.0f} ", interval=5, fg=1),
        CPU(" 󰓅 {perc:02.0f}, {freq:0.1f}GHz ", fg=2),
        ALSA(" {icon} {vol:02.0f} ", icons=['󰕾', '󰖁'], interval=5, fg=3),
        Backlight(" 󰃟 {backlight:02.0f} ", interval=5, fg=4),
        IMAP(" {icon} {unread} ", "oliver_lew@outlook.com", icons=["󰇮", "󰇰"], interval=60),
        Mpd(" 󰝚 {icon} ", icons=["󰏤", "󰐊", "󰓛"], interval=5, fg=5),
        Battery(
            " {icon} {perc:02.0f} ",
            icons=[
                ['󰂎', '󰁺', '󰁻', '󰁼', '󰁽', '󰁾', '󰁿', '󰂀', '󰂁', '󰂂', '󰁹'],
                ['󰢟', '󰢜', '󰂆', '󰂇', '󰂈', '󰢝', '󰂉', '󰢞', '󰂊', '󰂋', '󰂅'],
                ["󱉞"]
            ],
            interval=5,
            fg=6
        ),
        Network(" {icon} ", icons=[["󰤯", "󰤟", "󰤢", "󰤥", "󰤨"], ["󰈀"]], fg=1),
        Date(" 󰃰 {date} ", fg=6),
        Dunst(" {icon} ", icons=["󰂞", "󰂛"], interval=5, fg=6),
        Segment(" 󰣖 ", fg=6),
        Segment(" 󰍉 ", fg=6),
    ], dwm=True, tmux="fbtmux").start()
